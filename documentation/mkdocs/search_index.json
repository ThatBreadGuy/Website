{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to the WildBeast documentation!\n\n\nWildBeast is a multifunction Discord bot intended to be able to perform various tasks, ranging from easy server moderation (Kick, ban) to having fun (8Ball etc.) in your Discord server. All created with customizability and ease of use in mind.\n\n\nGeneral information\n\n\nWildBeast was originally written by \nSteamingMutt\n \"Dougley\", \nMirrorbreak\n \"Mirrow\" and Perpetucake. Since then it has became one of the more widely used Discord bots, with over 27000 servers and counting only on the official WildBot.\n\n\nIt is written in JavaScript Node.JS, using the DiscordIE library.\n\n\nMain features\n\n\nThese features are available in every WildBeast instance, including our official WildBot!\n\n\n\n\nMusic streaming from YouTube, SoundCloud etc.\n\n\nClassy insults\n\n\nDank meme generation system with your own parameters\n\n\nUseful advice\n\n\nModeration commands\n\n\nNSFW images via e621 and rule34\n\n\nServer utilities (Welcome messages, server and user info etc.)\n\n\nHigh level of customization (Changing messages on a per-server basis, permission level system)\n\n\n\n\nIn addition, WildBeast has its very own command building syntax which is very easy to start making new commands with. You can see more of this over at \nthe Custom Commands page\n.\n\n\nSelfhosting\n\n\nWe provide very extensive guides on installing WildBeast over here on the wiki, written by our trusty paperworker LWTechGaming. Currently we support installation on Windows and Ubuntu systems. Docker guides are on their way.\n\n\nResources for selfhosters\n\n\n\n\nWindows installation guide\n\n\nLinux installation guide\n\n\nUpdating guide\n\n\n\n\nDiscord server\n\n\nWe run a Discord server in which you can test WildBeast's functionality in our own sandboxes. Feel free to come over to chat, meet fellow coders and users alike or just hang out with the community! Click the banner below to get started.",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-the-wildbeast-documentation",
            "text": "WildBeast is a multifunction Discord bot intended to be able to perform various tasks, ranging from easy server moderation (Kick, ban) to having fun (8Ball etc.) in your Discord server. All created with customizability and ease of use in mind.",
            "title": "Welcome to the WildBeast documentation!"
        },
        {
            "location": "/#general-information",
            "text": "WildBeast was originally written by  SteamingMutt  \"Dougley\",  Mirrorbreak  \"Mirrow\" and Perpetucake. Since then it has became one of the more widely used Discord bots, with over 27000 servers and counting only on the official WildBot.  It is written in JavaScript Node.JS, using the DiscordIE library.",
            "title": "General information"
        },
        {
            "location": "/#main-features",
            "text": "These features are available in every WildBeast instance, including our official WildBot!   Music streaming from YouTube, SoundCloud etc.  Classy insults  Dank meme generation system with your own parameters  Useful advice  Moderation commands  NSFW images via e621 and rule34  Server utilities (Welcome messages, server and user info etc.)  High level of customization (Changing messages on a per-server basis, permission level system)   In addition, WildBeast has its very own command building syntax which is very easy to start making new commands with. You can see more of this over at  the Custom Commands page .",
            "title": "Main features"
        },
        {
            "location": "/#selfhosting",
            "text": "We provide very extensive guides on installing WildBeast over here on the wiki, written by our trusty paperworker LWTechGaming. Currently we support installation on Windows and Ubuntu systems. Docker guides are on their way.  Resources for selfhosters   Windows installation guide  Linux installation guide  Updating guide",
            "title": "Selfhosting"
        },
        {
            "location": "/#discord-server",
            "text": "We run a Discord server in which you can test WildBeast's functionality in our own sandboxes. Feel free to come over to chat, meet fellow coders and users alike or just hang out with the community! Click the banner below to get started.",
            "title": "Discord server"
        },
        {
            "location": "/install_windows/",
            "text": "Welcome to the installation guide for WildBeast on Windows! In this guide, we'll walk you through the installation and deployment process for the WildBeast bot.\n\n\nPrerequisites\n\n\n\n\nWindows system\n\n\nMost Windows systems can run this bot fine, unless you have a really low-end laptop.\n\n\nOS: Windows 7 and up\n\n\nAdministrator access to the computer\n\n\n\n\n\n\nPrograms\n\n\nWe will be installing programs that are directly related to the bot later on. They will not be listed here.\n\n\nThese programs are required pre-setup:\n\n\nA code editor, i.e. \nNotepad++\n or \nAtom\n\n\n\n\n\n\n\n\n\n\n\n\nInstallation\n\n\nGeneral note: Quite a few steps in this guide will be using administrative permissions. Therefore we recommend that you are logged into an administrator account to not have to type the admin password every time you perform something.\n\n\nInstalling Node\n\n\nGo to \nthe NodeJS download page\n and download the version relevant to your OS bit version.\n\n\nIt's pretty straight forward, just make sure that the features tab looks like this.\n\n\n\n\nWhen that's installed, it's time to retrieve the WB repository.\n\n\nInstalling Git and retrieving WildBeast\n\n\nNext we'll install Git to be able to download WildBeast.\nStart off by going to \nthe Git download page\n and download the Windows installer.\n\n\n\nNOTE:\n The installation process of Git has to go exactly as described below, otherwise you will have to take longer ways around!\n\n\nOnce downloaded, run the installer. Read the license and continue. Once you get to the component selection, \nmake sure that it looks at least like this!\n\n\n\n\nAfter selecting the start menu folder, this is where things get precise. \nMake sure that you tick the boxes exactly as follows!\n\n\n\n\n\n\n\n\n\n\nAnd in text:\n\n\nUse Git from the Windows Command Prompt\n (In \nAdjusting your PATH environment\n)\n\n\nCheckout Windows-style, commit Unix-style endings\n (In \nConfigure the line ending conversions\n)\n\n\nUse OpenSSH\n(In \nChoosing the SSH executable\n)\n\n\nUse MinTTY (the default terminal MSYS2)\n (In \nConfiguring the terminal emulator to use with Git Bash\n)\n\nWhen you've gotten that straight, \nyou've set up Git in the way we intend to use it!\n     \n\n\nNext, we'll retrieve the WildBeast GitHub repository, or clone in Git terms. This means that we download the bot using the Git SCM system.\nNow, you might ask: \nWhy are we doing this? Can't I just download a ZIP package?\n\nThe answer is: No. We're making it easier for you in the future to update WildBeast, just follow along for now.\n\n\nYou'd want to figure out where you want the bot to be downloaded. Something simple like the root of the C:\\ drive (Possibly some other drive, though \nNOT A FLASH DRIVE\n) or optionally your Desktop could be fine.\nWhen you've found the location of your choice, hit Shift+Right click and select \nGit Bash here\n. This will open the Git Bash console.\nType the following command into Git Bash:\n\n\ngit clone https://github.com/TheSharks/WildBeast.git -b master\n\n\n\n\nLet it clone the Git repository. When it's done, you should have the following output.\n\n\n\n\nNOTE:\n If you get any errors, see \nthe FAQ\n before asking questions!\n\n\nNow, why did we do it this way? The reason is simple: Ease of updating. If we make a commit to the repository (Smaller update), you can apply that update to your bot in seconds \nwithout having to redo anything\n. If you downloaded a ZIP package, you would \nhave to redownload the entire ZIP package again before it's updated!\n\nThat is the reason to why we use Git to download WildBeast.\n\n\nYou have now successfully cloned the WildBeast Git repository!\n\n\nInstalling the Node dependencies\n\n\nNow it's time to install the Node dependencies for the bot. These are smaller packages that WildBeast relies on to run.\nOpen a command prompt in the WildBeast folder (Shift+Right click) and select \"Open command window here\". This will open a command window.\nNext, type in the following command into the command prompt:\n\n\nnpm install\n\n\n\n\nThis will download the dependencies. Wait until it completes, and when you are able to execute commands again the install has completed. The output is too huge to provide an image of, so you'll have to do without.\n\n\nIf you get errors that say \nWARN\n and yellow text, you can ignore those. If you however start getting red text, there might be a problem installing. Check that the WildBeast directory does not require admin permissions to execute stuff in. You may come and ask us \nover at WildBot's Territory\n if you need help debugging these errors.\n\n\nInstalling RethinkDB and creating the DB\n\n\nAs of WildBeast version 4.0.0, the bot uses RethinkDB to store server-specific data. This includes server owner, customize options and a whole bunch of other things.\n\n\nImportant note before starting:\n Do not fiddle with RethinkDB options or execute commands outside of the ones we tell you to unless you understand RethinkDB and can unbork it yourself. We will not start solving your database if you messed it up.\n\n\nClick \nthis link\n to download the RethinkDB executable. (No worries, that's the official download link)\n\n\nWhen the file has downloaded, extract rethinkdb.exe to someplace suitable. We'd recommend creating a new folder on your C:\\ drive and naming it RethinkDB, then just put the file in there. Browse to the directory you put the executable in, then hit Shift+Right click and select \"Open command window here\". In the command prompt, type in the following command:\n\n\nrethinkdb --bind all\n\n\n\n\nThe RethinkDB server will start up and list some addresses plus other things. When the output resembles to the one displayed below, you're good to go. Just leave the command window open or the server will shut down.\n\n\n\n\nConfiguration\n\n\nFind \nconfig.example.json\n on your PC and open it using Notepad++ or any other code editor. \nDo not edit it with Windows Notepad, that will be a mess.\n\n\nThe config file\n\n\nWhen opening the config file, you should have a file that looks like the \nexample config\n (The CSE is deprecated and likely to be removed, but the others are still needed)\n\n\nWe'll now walk you through the different sections in the config and what they do.\n\n\nBot section\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\n\n\nisbot\n\n\nIf an OAuth bot account should be used.\n\n\nRecommended to be true due to \nDiscord bot rules\n.\n\n\n\n\n\n\n\n\ntoken\n\n\nOAuth token for the bot.\n\n\nRefer to the \"Making the config\" section.\n\n\n\n\n\n\n\n\nemail\n\n\nEmail for normal user account that the bot will use.\n\n\nDO NOT\n input your personal login details here.\n\n\n\n\n\n\n\n\npassword\n\n\nPassword for the account mentioned above.\n\n\nAs above.\n\n\n\n\n\n\n\n\noauth\n\n\nThe OAuth URL for the bot.\n\n\nRefer to the \"Making the config\" section.\n\n\n\n\n\n\n\n\n\n\nDatabase section\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\n\n\nhost\n\n\nPoints to WildBeast's database, localhost by default.\n\n\nDon't modify unless you have a remote database set up.\n\n\n\n\n\n\n\n\nport\n\n\nSpecifies which network port the RethinkDB server is running on.\n\n\nAs above. Default is 28015.\n\n\n\n\n\n\n\n\npassword\n\n\nPassword to RethinkDB user.\n\n\nAdmin account has no password by default. Don't set a password for the admin account unless you want to have to edit this.\n\n\n\n\n\n\n\n\nuser\n\n\nRethinkDB user account to use for accessing the database.\n\n\nAdmin by default. Admin will have permission to all databases so it should stay like this.\n\n\n\n\n\n\n\n\n\n\nSettings section\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\n\n\nprefix\n\n\nThe command prefix the bot will use.\n\n\nCan be a special character like \n/\n etc.\n\n\n\n\n\n\n\n\nautodeletemsg\n\n\nAutomatically delete music-related messages after a while.\n\n\nThe time for this is possible to configure. Boolean.\n\n\n\n\n\n\n\n\ndeleteTimeout\n\n\nThe amount of time after which to delete the messages.\n\n\nInsert time in milliseconds, default 3000.\n\n\n\n\n\n\n\n\ndeleteTimeoutLong\n\n\nSame as above, but for messages that have a longer timeout.\n\n\nFor now only \nthis message\n uses the long timeout. In milliseconds, default 6000.\n\n\n\n\n\n\n\n\nmaxvcslots\n\n\nHow many concurrent voice connections the bot can have until it won't join more.\n\n\nDefault limit is 10, depends on the beefyness of your system.\n\n\n\n\n\n\n\n\n\n\nPermissions section\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\nThe highest possible access level of 9. Full permissions.\n\n\nOnly give this to yourself and maybe others you really trust.\n\n\n\n\n\n\n\n\nlevel1, level2, level3\n\n\nSettable access levels that give users access to certain commands.\n\n\nDefault access levels can be found in \nthe command files\n.\n\n\n\n\n\n\n\n\n\n\nNotice: By default, when WildBeast joins a server it will set the owner's access level to 5. This is to give them control over normal users. \n\n\nAPI keys section\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\n\n\nimgflip\n\n\nYour \nimgflip\n login details.\n\n\nUsed in certain meme commands.\n\n\n\n\n\n\n\n\ngoogle\n\n\nFor retrieving data from YouTube.\n\n\nRefer to the \"Making the config\" section.\n\n\n\n\n\n\n\n\nmashape\n\n\nFor retrieving the Fortune Cow.\n\n\nRefer to the \"Making the config\" section.\n\n\n\n\n\n\n\n\ncse\n\n\nDeprecated and not required, don't bother with this.\n\n\nThis will be removed at some point.\n\n\n\n\n\n\n\n\ntwitchId\n\n\nFor retrieving status of whether a user on Twitch is streaming or not.\n\n\nRefer to the \"Making the config\" section.\n\n\n\n\n\n\n\n\n\n\nMaking the config\n\n\n\n\nOAuth app\n\n\nWe'll start off by creating an OAuth application in Discord's developer interface so that the bot can login.\n\n\nGo to \nthe Discord Dev dashboard\n and create a new application.\n\n\nName it whatever you prefer and give it a fancy picture. Fill in a description if you want to, then click \"Create application\".\n\n\nNow you'll have a more full-fledged app page. Click \"Add Bot User\" and confirm to make it a bot.\n\n\nHere you'll get a Client ID and a token. Reveal the token (\nNot the secret\n) and replace \"Bot token\" with that in the config.\n\n\n\n\n\n\nIf you completed the step above and want to comply with Discord rules, skip the email/password section and leave them be.\n\n\nNext we'll make an OAuth URL for the bot so it can be added to the server.\n\n\nJust put this placeholder URL somewhere for now, \ndon't open it as it will not work\n.\n\nhttps://discordapp.com/oauth2/authorize?&client_id=CLIENTID&scope=bot&permissions=536345655\n\n\nGo back to the app page, and copy the Client ID.\n\n\nReplace the \nCLIENTID\n placeholder in the URL above with the ID you just copied. You can open the URL to test that you did it right.\n\n\nIf the URL works as intended, copy it and replace \"URL\" in the config with the one you copied.\n\n\nYou can also open the URL and add your bot to the server at this point, so you don't forget it. It will have the permissions it wants precalculated due to the number after the \npermissions\n property. Just select your server from the dropdown list and add it. The bot won't do anything at this stage because we're not finished yet.\n\n\nIf you can't select your server, it might be that you lack Manage Server permissions.\n\n\n\n\n\n\n\n\n\n\nPrefix and other settings\n\n\nSetting the command prefix isn't really \nrocket science\n. This can be any special character, for instance \n/\n, \n?\n and so forth.\n\n\nYou can also use multiple characters as a prefix, for instance \n!!\n and \n++\n.\n\n\nNote that there is always a so-called global prefix: A mention. Saying \n@BotName\n in chat will function as a prefix as well. \nThis doesn't need to be specified in the config as it's always active.\n\n\n\n\n\n\nThe rest of the options are straight forward. \nautodeletemsg\n can be true or false, the message deletion times can be whatever you fancy in milliseconds and \nmaxvcslots\n is just a number.\n\n\nPermissions\n\n\nThis is a section that has a very interesting gimmick to it.\n\n\nWildBeast has a command named \nsetlevel\n which will set the level of a user. \nHowever\n, that is written into a server-specific config. Which means that if you set the level of someone to 2 in Server1, they will not be level 2 in Server2, for example.\n\n\nThe permissions fields here are so-called \nglobal permissions\n, and will apply unless a server-specific level is set.\n\n\nUse this to add technicians and others who need permissions regardless of where the bot is.\n\n\n\n\n\n\nYou can specify users here by adding their IDs into the fields. Only the master field is mandatory.\n\n\nYou can get the ID of a user by either \"backlash mentioning\" them, which means to say typing \n\\@User\n in chat or by enabling Developer Mode (Personal Settings -> Appearance -> Enable Developer Mode) and right-clicking on someone, subsequently selecting Copy ID from the list and pasting it in between the quotes.\n\n\nRemember to follow the example syntax in the master field when adding multiple users!\n\n\n\n\n\n\n\n\n\n\nAPI keys\n\n\nGeneral notice: Anything within these fields is sensitive and could do much harm if revealed to the public.\n\n\nTherefore it is imperative that you keep this to yourself.\n\n\nWildBeast maintainers will \nNEVER\n ask for your login details or API keys. Only show the config to trusted WildBeast maintainers with the \nStaff\n role in WildBot's Territory.\n\n\n\n\n\n\nimgflip\n\n\nThe procedure for getting this isn't tricky. Just go to https://imgflip.com, create an account and input your username and password into the fields.\n\n\n\n\n\n\nGoogle\n\n\nThis API is used to retrieve data from YouTube, related to music playback.\n\n\nGo to https://console.developers.google.com and create a new project. Name it whatever you fancy. Nothing else needs to be changed unless you want to change the project ID or the app engine location.\n\n\nWait a while as the project is being created.\n\n\nWhen the creation process is completed, you'll get taken to the Dashboard screen of the project. In the sidebar on the left, click \"Library\".\n\n\nThis will take you to the API library. Select \"YouTube Data API\" as highlighted below.\n\n\n\nWhen the API page opens, click the \"Enable\" button in the top bar. Then you will get a notification saying that you need to create creditentials. That's exactly what we will do.\n\n\nClick the \"Go to creditentials\" button. In the next dropdowns, make them look like following.\n\n\n\nHit \"What creditentials do I need?\" and the page will generate a Google API key for you. Copy the API key and replace the \"A google key\" placeholder with that key in the config.\n\n\n\n\n\n\n\n\n\n\nMashape\n\n\nThis API is used with the \nfortunecow\n command.\n\n\nGo to \nthe Mashape site\n and login as you prefer, GitHub login is supported.\n\n\nNavigate to the \nMashape APIs dashboard\n and add a new application. Name it as you wish.\n\n\nOnce the app is created, click \"Add API to your application\" and search for \nfortunecow\n.\n\n\nOpen the fortunecow API page and in one of the dropdowns on the left, change it to the application you just created and hit \"Test Endpoint\" on any you wish to test. Only one is required.\n\n\nThis will add the API to your application. Navigate back to the dashboard and click on the app itself. It should now have an appearance that resembles to this.\n    \n\n\nHit \"Get the keys\" in the top-right corner. In the drop-down menu that is opened, select \"Production\". This will be your Mashape API key for that application. Copy that and replace the \"A mashape key\" placeholder in the config with that key.\n\n\n\n\n\n\nCSE\n\n\nThis option isn't required anymore and can safely be left alone. If you really want to get one you can, but it won't do anything and you'll have to do that yourself.\n\n\n\n\n\n\nTwitch\n\n\nThis API is used with the \ntwitch\n command. This will be the client ID the bot passes to Twitch when retrieving stream status.\n\n\nGo to the \nTwitch Connections page\n, scroll down to the bottom and click \"Register new application\".\n\n\nFill in the fields. Name should be your app name, and set the Redirect URI to \nhttp://localhost\n unless you want something to function differently. Set the app type to \"Chat Bot\" as that's what you're basically doing here.\n    \n\n\nClick \"Register\". This will take you to the application management page. Down towards the bottom, there will be a section saying \"Client ID\".\n    \n\n\nCopy that character sequence and replace the \"A twitch Client-ID\" placeholder in the config with that ID.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThat's all, your config should now be ready to rock! Save it as \nconfig.json\n (\nNOT\n \nconfig.example.json\n as the bot will error if you do. TLDR: Don't hit Ctrl+S, hit Ctrl+Alt+S).\n\n\nRunning the bot\n\n\nCongratulations, your WildBeast instance should be ready to launch!\n\n\nTo test if you've done everything correctly, you can do a \"test run\" with the bot. This means not making it permanently available, just testing if any errors are spat out when running.\n\n\nOpen a command window in the WildBeast folder (Shift+Right click and select Open command window here)\nRun the following command within the bot's folder:\n\n\nnode DougBot.js\n\n\n\n\nUpon first run, the bot will automatically create the database tables needed to run it.\n\n\nIf the bot runs without any errors, you have had success so far!\n\n\nYou can test simple functionality by running the \nping\n command (With your desired prefix) in a text channel that the bot can see. If it answers \"Pong!\", then congratulations, \nyou have successfully set up WildBeast!\n\n\nRemember to keep the command window open, otherwise the bot will stop running! When you want to stop it, just close the command window.\n\n\nAnd that's it! You are now ready to start using your very own WildBeast instance!\n\n\nKeep in mind, if you have further questions or need help, we're around over at our official server! Link below.\n\n\nOn the behalf of the WildBeast team, \nwe hope you enjoy your bot!",
            "title": "Windows Guide"
        },
        {
            "location": "/install_windows/#prerequisites",
            "text": "Windows system  Most Windows systems can run this bot fine, unless you have a really low-end laptop.  OS: Windows 7 and up  Administrator access to the computer    Programs  We will be installing programs that are directly related to the bot later on. They will not be listed here.  These programs are required pre-setup:  A code editor, i.e.  Notepad++  or  Atom",
            "title": "Prerequisites"
        },
        {
            "location": "/install_windows/#installation",
            "text": "General note: Quite a few steps in this guide will be using administrative permissions. Therefore we recommend that you are logged into an administrator account to not have to type the admin password every time you perform something.",
            "title": "Installation"
        },
        {
            "location": "/install_windows/#installing-node",
            "text": "Go to  the NodeJS download page  and download the version relevant to your OS bit version.  It's pretty straight forward, just make sure that the features tab looks like this.   When that's installed, it's time to retrieve the WB repository.",
            "title": "Installing Node"
        },
        {
            "location": "/install_windows/#installing-git-and-retrieving-wildbeast",
            "text": "Next we'll install Git to be able to download WildBeast.\nStart off by going to  the Git download page  and download the Windows installer.  NOTE:  The installation process of Git has to go exactly as described below, otherwise you will have to take longer ways around!  Once downloaded, run the installer. Read the license and continue. Once you get to the component selection,  make sure that it looks at least like this!   After selecting the start menu folder, this is where things get precise.  Make sure that you tick the boxes exactly as follows!      And in text:  Use Git from the Windows Command Prompt  (In  Adjusting your PATH environment )  Checkout Windows-style, commit Unix-style endings  (In  Configure the line ending conversions )  Use OpenSSH (In  Choosing the SSH executable )  Use MinTTY (the default terminal MSYS2)  (In  Configuring the terminal emulator to use with Git Bash ) \nWhen you've gotten that straight,  you've set up Git in the way we intend to use it!        Next, we'll retrieve the WildBeast GitHub repository, or clone in Git terms. This means that we download the bot using the Git SCM system.\nNow, you might ask:  Why are we doing this? Can't I just download a ZIP package? \nThe answer is: No. We're making it easier for you in the future to update WildBeast, just follow along for now.  You'd want to figure out where you want the bot to be downloaded. Something simple like the root of the C:\\ drive (Possibly some other drive, though  NOT A FLASH DRIVE ) or optionally your Desktop could be fine.\nWhen you've found the location of your choice, hit Shift+Right click and select  Git Bash here . This will open the Git Bash console.\nType the following command into Git Bash:  git clone https://github.com/TheSharks/WildBeast.git -b master  Let it clone the Git repository. When it's done, you should have the following output.   NOTE:  If you get any errors, see  the FAQ  before asking questions!  Now, why did we do it this way? The reason is simple: Ease of updating. If we make a commit to the repository (Smaller update), you can apply that update to your bot in seconds  without having to redo anything . If you downloaded a ZIP package, you would  have to redownload the entire ZIP package again before it's updated! \nThat is the reason to why we use Git to download WildBeast.  You have now successfully cloned the WildBeast Git repository!",
            "title": "Installing Git and retrieving WildBeast"
        },
        {
            "location": "/install_windows/#installing-the-node-dependencies",
            "text": "Now it's time to install the Node dependencies for the bot. These are smaller packages that WildBeast relies on to run.\nOpen a command prompt in the WildBeast folder (Shift+Right click) and select \"Open command window here\". This will open a command window.\nNext, type in the following command into the command prompt:  npm install  This will download the dependencies. Wait until it completes, and when you are able to execute commands again the install has completed. The output is too huge to provide an image of, so you'll have to do without.  If you get errors that say  WARN  and yellow text, you can ignore those. If you however start getting red text, there might be a problem installing. Check that the WildBeast directory does not require admin permissions to execute stuff in. You may come and ask us  over at WildBot's Territory  if you need help debugging these errors.",
            "title": "Installing the Node dependencies"
        },
        {
            "location": "/install_windows/#installing-rethinkdb-and-creating-the-db",
            "text": "As of WildBeast version 4.0.0, the bot uses RethinkDB to store server-specific data. This includes server owner, customize options and a whole bunch of other things.  Important note before starting:  Do not fiddle with RethinkDB options or execute commands outside of the ones we tell you to unless you understand RethinkDB and can unbork it yourself. We will not start solving your database if you messed it up.  Click  this link  to download the RethinkDB executable. (No worries, that's the official download link)  When the file has downloaded, extract rethinkdb.exe to someplace suitable. We'd recommend creating a new folder on your C:\\ drive and naming it RethinkDB, then just put the file in there. Browse to the directory you put the executable in, then hit Shift+Right click and select \"Open command window here\". In the command prompt, type in the following command:  rethinkdb --bind all  The RethinkDB server will start up and list some addresses plus other things. When the output resembles to the one displayed below, you're good to go. Just leave the command window open or the server will shut down.",
            "title": "Installing RethinkDB and creating the DB"
        },
        {
            "location": "/install_windows/#configuration",
            "text": "Find  config.example.json  on your PC and open it using Notepad++ or any other code editor.  Do not edit it with Windows Notepad, that will be a mess.",
            "title": "Configuration"
        },
        {
            "location": "/install_windows/#the-config-file",
            "text": "When opening the config file, you should have a file that looks like the  example config  (The CSE is deprecated and likely to be removed, but the others are still needed)  We'll now walk you through the different sections in the config and what they do.",
            "title": "The config file"
        },
        {
            "location": "/install_windows/#bot-section",
            "text": "Property  Explanation  Notes       isbot  If an OAuth bot account should be used.  Recommended to be true due to  Discord bot rules .     token  OAuth token for the bot.  Refer to the \"Making the config\" section.     email  Email for normal user account that the bot will use.  DO NOT  input your personal login details here.     password  Password for the account mentioned above.  As above.     oauth  The OAuth URL for the bot.  Refer to the \"Making the config\" section.",
            "title": "Bot section"
        },
        {
            "location": "/install_windows/#database-section",
            "text": "Property  Explanation  Notes       host  Points to WildBeast's database, localhost by default.  Don't modify unless you have a remote database set up.     port  Specifies which network port the RethinkDB server is running on.  As above. Default is 28015.     password  Password to RethinkDB user.  Admin account has no password by default. Don't set a password for the admin account unless you want to have to edit this.     user  RethinkDB user account to use for accessing the database.  Admin by default. Admin will have permission to all databases so it should stay like this.",
            "title": "Database section"
        },
        {
            "location": "/install_windows/#settings-section",
            "text": "Property  Explanation  Notes       prefix  The command prefix the bot will use.  Can be a special character like  /  etc.     autodeletemsg  Automatically delete music-related messages after a while.  The time for this is possible to configure. Boolean.     deleteTimeout  The amount of time after which to delete the messages.  Insert time in milliseconds, default 3000.     deleteTimeoutLong  Same as above, but for messages that have a longer timeout.  For now only  this message  uses the long timeout. In milliseconds, default 6000.     maxvcslots  How many concurrent voice connections the bot can have until it won't join more.  Default limit is 10, depends on the beefyness of your system.",
            "title": "Settings section"
        },
        {
            "location": "/install_windows/#permissions-section",
            "text": "Property  Explanation  Notes       master  The highest possible access level of 9. Full permissions.  Only give this to yourself and maybe others you really trust.     level1, level2, level3  Settable access levels that give users access to certain commands.  Default access levels can be found in  the command files .      Notice: By default, when WildBeast joins a server it will set the owner's access level to 5. This is to give them control over normal users.",
            "title": "Permissions section"
        },
        {
            "location": "/install_windows/#api-keys-section",
            "text": "Property  Explanation  Notes       imgflip  Your  imgflip  login details.  Used in certain meme commands.     google  For retrieving data from YouTube.  Refer to the \"Making the config\" section.     mashape  For retrieving the Fortune Cow.  Refer to the \"Making the config\" section.     cse  Deprecated and not required, don't bother with this.  This will be removed at some point.     twitchId  For retrieving status of whether a user on Twitch is streaming or not.  Refer to the \"Making the config\" section.",
            "title": "API keys section"
        },
        {
            "location": "/install_windows/#making-the-config",
            "text": "OAuth app  We'll start off by creating an OAuth application in Discord's developer interface so that the bot can login.  Go to  the Discord Dev dashboard  and create a new application.  Name it whatever you prefer and give it a fancy picture. Fill in a description if you want to, then click \"Create application\".  Now you'll have a more full-fledged app page. Click \"Add Bot User\" and confirm to make it a bot.  Here you'll get a Client ID and a token. Reveal the token ( Not the secret ) and replace \"Bot token\" with that in the config.    If you completed the step above and want to comply with Discord rules, skip the email/password section and leave them be.  Next we'll make an OAuth URL for the bot so it can be added to the server.  Just put this placeholder URL somewhere for now,  don't open it as it will not work . https://discordapp.com/oauth2/authorize?&client_id=CLIENTID&scope=bot&permissions=536345655  Go back to the app page, and copy the Client ID.  Replace the  CLIENTID  placeholder in the URL above with the ID you just copied. You can open the URL to test that you did it right.  If the URL works as intended, copy it and replace \"URL\" in the config with the one you copied.  You can also open the URL and add your bot to the server at this point, so you don't forget it. It will have the permissions it wants precalculated due to the number after the  permissions  property. Just select your server from the dropdown list and add it. The bot won't do anything at this stage because we're not finished yet.  If you can't select your server, it might be that you lack Manage Server permissions.      Prefix and other settings  Setting the command prefix isn't really  rocket science . This can be any special character, for instance  / ,  ?  and so forth.  You can also use multiple characters as a prefix, for instance  !!  and  ++ .  Note that there is always a so-called global prefix: A mention. Saying  @BotName  in chat will function as a prefix as well.  This doesn't need to be specified in the config as it's always active.    The rest of the options are straight forward.  autodeletemsg  can be true or false, the message deletion times can be whatever you fancy in milliseconds and  maxvcslots  is just a number.  Permissions  This is a section that has a very interesting gimmick to it.  WildBeast has a command named  setlevel  which will set the level of a user.  However , that is written into a server-specific config. Which means that if you set the level of someone to 2 in Server1, they will not be level 2 in Server2, for example.  The permissions fields here are so-called  global permissions , and will apply unless a server-specific level is set.  Use this to add technicians and others who need permissions regardless of where the bot is.    You can specify users here by adding their IDs into the fields. Only the master field is mandatory.  You can get the ID of a user by either \"backlash mentioning\" them, which means to say typing  \\@User  in chat or by enabling Developer Mode (Personal Settings -> Appearance -> Enable Developer Mode) and right-clicking on someone, subsequently selecting Copy ID from the list and pasting it in between the quotes.  Remember to follow the example syntax in the master field when adding multiple users!      API keys  General notice: Anything within these fields is sensitive and could do much harm if revealed to the public.  Therefore it is imperative that you keep this to yourself.  WildBeast maintainers will  NEVER  ask for your login details or API keys. Only show the config to trusted WildBeast maintainers with the  Staff  role in WildBot's Territory.    imgflip  The procedure for getting this isn't tricky. Just go to https://imgflip.com, create an account and input your username and password into the fields.    Google  This API is used to retrieve data from YouTube, related to music playback.  Go to https://console.developers.google.com and create a new project. Name it whatever you fancy. Nothing else needs to be changed unless you want to change the project ID or the app engine location.  Wait a while as the project is being created.  When the creation process is completed, you'll get taken to the Dashboard screen of the project. In the sidebar on the left, click \"Library\".  This will take you to the API library. Select \"YouTube Data API\" as highlighted below.  When the API page opens, click the \"Enable\" button in the top bar. Then you will get a notification saying that you need to create creditentials. That's exactly what we will do.  Click the \"Go to creditentials\" button. In the next dropdowns, make them look like following.  Hit \"What creditentials do I need?\" and the page will generate a Google API key for you. Copy the API key and replace the \"A google key\" placeholder with that key in the config.      Mashape  This API is used with the  fortunecow  command.  Go to  the Mashape site  and login as you prefer, GitHub login is supported.  Navigate to the  Mashape APIs dashboard  and add a new application. Name it as you wish.  Once the app is created, click \"Add API to your application\" and search for  fortunecow .  Open the fortunecow API page and in one of the dropdowns on the left, change it to the application you just created and hit \"Test Endpoint\" on any you wish to test. Only one is required.  This will add the API to your application. Navigate back to the dashboard and click on the app itself. It should now have an appearance that resembles to this.\n      Hit \"Get the keys\" in the top-right corner. In the drop-down menu that is opened, select \"Production\". This will be your Mashape API key for that application. Copy that and replace the \"A mashape key\" placeholder in the config with that key.    CSE  This option isn't required anymore and can safely be left alone. If you really want to get one you can, but it won't do anything and you'll have to do that yourself.    Twitch  This API is used with the  twitch  command. This will be the client ID the bot passes to Twitch when retrieving stream status.  Go to the  Twitch Connections page , scroll down to the bottom and click \"Register new application\".  Fill in the fields. Name should be your app name, and set the Redirect URI to  http://localhost  unless you want something to function differently. Set the app type to \"Chat Bot\" as that's what you're basically doing here.\n      Click \"Register\". This will take you to the application management page. Down towards the bottom, there will be a section saying \"Client ID\".\n      Copy that character sequence and replace the \"A twitch Client-ID\" placeholder in the config with that ID.         That's all, your config should now be ready to rock! Save it as  config.json  ( NOT   config.example.json  as the bot will error if you do. TLDR: Don't hit Ctrl+S, hit Ctrl+Alt+S).",
            "title": "Making the config"
        },
        {
            "location": "/install_windows/#running-the-bot",
            "text": "Congratulations, your WildBeast instance should be ready to launch!  To test if you've done everything correctly, you can do a \"test run\" with the bot. This means not making it permanently available, just testing if any errors are spat out when running.  Open a command window in the WildBeast folder (Shift+Right click and select Open command window here)\nRun the following command within the bot's folder:  node DougBot.js  Upon first run, the bot will automatically create the database tables needed to run it.  If the bot runs without any errors, you have had success so far!  You can test simple functionality by running the  ping  command (With your desired prefix) in a text channel that the bot can see. If it answers \"Pong!\", then congratulations,  you have successfully set up WildBeast!  Remember to keep the command window open, otherwise the bot will stop running! When you want to stop it, just close the command window.",
            "title": "Running the bot"
        },
        {
            "location": "/install_windows/#and-thats-it-you-are-now-ready-to-start-using-your-very-own-wildbeast-instance",
            "text": "Keep in mind, if you have further questions or need help, we're around over at our official server! Link below.  On the behalf of the WildBeast team,  we hope you enjoy your bot!",
            "title": "And that's it! You are now ready to start using your very own WildBeast instance!"
        },
        {
            "location": "/install_linux/",
            "text": "Welcome to the installation guide for WildBeast on Linux! In this guide, we'll walk you through the installation and deployment process for the WildBeast bot.\n\n\nPrerequisites\n\n\n\n\nA Linux server\n\n\nType: VPS is enough to run WB, dedicated is a bit overshooting unless you have something else running there as well.\n\n\nOS: Ubuntu, latest version if possible.\n\n\nRAM: 512 MB upwards, if you plan on having it on just a few servers. Scale up if necessary.\n\n\nProcessor: Single core @ 3,30 GHz will work just fine, as above.\n\n\nSSH access to the server.\n\n\n\n\n\n\nPrograms\n\n\nSSH client, i.e. \nPuTTY\n for executing commands to the server\n\n\nFTP program, i.e. \nFileZilla\n for quick editing and upload of files\n\n\nA code editor, i.e. \nNotepad++\n or \nAtom\n\n\n\n\n\n\n\n\nPre-setup\n\n\nWe higly recommend that you go through a basic Linux server setup before starting this, which includes adding a new user, disabling root login (If you feel so) and adding key authentication for logins. If you have no idea what we mean by this, see the \nDigital Ocean guide for initial server setup\n. When this is complete, you can proceed to the next step.\n\n\nInstallation\n\n\nGeneral note: During installation, some administrative tasks will be executed. For these to work (Especially installations), \nyou need to run these commands as sudo\n! They might error if you don't.\nLuckily, the process of executing as sudo isn't that complicated. Just put \nsudo\n ahead of every install command or other administrative equivalent.\nYou will be asked for a password when doing the command, that's all that really is added.\n\nKeep this in mind when setting up, so you don't waste our time with errors that stem from lacking permissions!\n\nThis does of course not apply to you who choose to not do the basic initial server setup and instead run as root.\n\n\nInstalling Node\n\n\nFirst off, we'll install Node.JS, the library WildBeast uses. The current 6.x.x version works fine.\n\n\nwget -qO- https://deb.nodesource.com/setup_6.x | sudo bash -\nsudo apt-get install -y nodejs\nsudo apt-get install -y build-essential\n\n\n\n\nAfter that is completed, you can check your Node version by executing the following:\n\n\nnode --version\n\n\n\n\nThe output should then be this or close to that.\n\n\nv5.10.1\n\n\n\n\nRetrieving WildBeast\n\n\nNow we'll retrieve the WildBeast files via Git. Install it with the following command:\n\n\napt-get install git\n\n\n\n\nWhen the install completes, clone the WildBeast Git repository.\n\n\ngit clone https://github.com/TheSharks/WildBeast.git\n\n\n\n\nIf you mess something up during the installation process, you can delete the directory with \nrm -d -f -r /WildBeast\n and reclone the Git repo.\n\n\nInstalling additional dependencies\n\n\nNow it's time to install the rest of the dependencies for WildBeast. Change the working directory to WildBeast with the command \ncd WildBeast\n before proceeding.\n\n\nNext, we will install FFMPEG. \nThis is a crucial step if you want to use music playback, so pay attention!\n\nRun these commands subsequently:\n\n\nsudo apt-get install ffmpeg -y\n\n\n\n\nWithout changing workdir, we'll now install the Node modules required for usage in WildBeast. Execute the following:\n\n\nnpm install\n\n\n\n\nThis will likely take a while as it has a lot to retrieve. If you get warns (Yellow text) you can ignore them as long as the output resembles to the following.\n\n\nWildBeast@4.0.0 /home/(yourhomedir)\n+-- cleverbot-node@0.2.2\n| +-- crypto@0.0.3\n| `-- http@0.0.0\n+-- discordie@0.8.1\n(And so forth)\n\n\n\n\nNote:\n If you get get errors (Red text), there may be different reasons for that. You can try hotfixing with this command:\n\n\nsudo add-apt-repository ppa:mc3man/trusty-media && sudo apt-get update && sudo apt-get install ffmpeg -y\n\n\n\n\nAfter doing that, repeat the above. If you still get errors, feel free to come and ask us over at \nWildBot's Territory\n.\n\n\nFinally, we'll install youtube-dl for the bot to be able to retrieve videos from remote sources. Use this command to accomplish that.\n\n\nnpm install fent/node-youtube-dl -g\n\n\n\n\nIf you get errors or the bot fails to run later on, rebuild YTDL by executing this command.\n\n\nnpm rebuild youtube-dl\n\n\n\n\nInstalling RethinkDB and creating the DB\n\n\nAs of WildBeast version 4.0.0, the bot uses RethinkDB to store server-specific data. This includes server owner, customize options and a whole bunch of other things.\n\n\nImportant note before starting:\n Do not fiddle with RethinkDB options or execute commands outside of the ones we tell you to unless you understand RethinkDB and can unbork it yourself. We will not start solving your database if you messed it up.\n\n\nRun the following commands one at a time.\n\n\nNOTE: The first command is \na single command\n. If it takes up multiple lines here in the docs, that is due to physical screen size. \nMake sure to paste it in as a whole!\n\n\nsource /etc/lsb-release && echo \"deb http://download.rethinkdb.com/apt $DISTRIB_CODENAME main\" | sudo tee etc/apt/sources.list.d/rethinkdb.list\nwget -qO- https://download.rethinkdb.com/apt/pubkey.gpg | sudo apt-key add -\nsudo apt-get update\nsudo apt-get install rethinkdb\n\n\n\n\nWhen RethinkDB has installed, run the following commands one at a time:\n\n\nscreen -S rethinkdb\nrethinkdb --bind all\n\n\n\n\nIf RethinkDB runs without errors, you should be good to go. When this is the case, hit Ctrl + A and then Ctrl + D to detach from the screen session.\n\n\nWildBeast has a system built in to create the required databases and tables for you without extra effort. To do this, execute this:\n\n\nnode DougBot.js --createdatabase\n\n\n\n\nAfter this it will tell you to restart without the parameter there. Don't do that yet, leave that to post-config.\n\n\nConfiguration\n\n\nSetting up SFTP\n\n\nNext we'll make a config file for WildBeast. Unless you love your command line and editing stuff that way, this is the step where we'd advise you to bring out FileZilla. Using this program, you can transfer files from and to the server. This speeds up the editing process.\n\n\nStart up FileZilla and open the server manager by hitting Ctrl+S. Click \"New Site\" and name it whatever you prefer. Then fill in the server's IP address. By default, SFTP (SSH File Transfer Protocol) connections go to port 22.\nIn the dropdown menu below, select SFTP. \nUsing normal FTP will initiate \nmaximum borkdrive\n so don't use that.\n\nIn the field below, you'll be setting the login method. Depending on the level of privacy or ease you want, you can select either \nNormal\n or \nAsk for password\n. Fill in your login details accordingly.\n\n\nUnless you know what you are doing, \ndon't touch the rest of the tabs\n. They are fine as they are.\n\n\nYour site should be something like the example below.\n\n\n\n\nRetrieving the example config\n\n\nConnect to the server in FileZilla. You should now see the so-called remote site in FileZilla. Open the WildBeast directory. In here you can find a file named \nconfig.example.json\n.\nRight click that file and select \"Download\". This will download the file to your computer for editing. On the left-hand side of the screen, you can see where the file was downloaded.\nFind \nconfig.example.json\n on your PC and open it using Notepad++ or any other code editor. \nDo not edit it with Windows Notepad, that will be a mess.\n\n\nThe config file\n\n\nWhen opening the config file, you should have a file that looks like the \nexample config\n (The CSE is deprecated and likely to be removed, but the others are still needed)\n\n\nWe'll now walk you through the different sections in the config and what they do.\n\n\nBot section\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nisbot\n\n\nIf an OAuth bot account should be used.\n\n\nRecommended to be true due to \nDiscord bot rules\n.\n\n\n\n\n\n\ntoken\n\n\nOAuth token for the bot.\n\n\nRefer to the \"Making the config\" section.\n\n\n\n\n\n\nemail\n\n\nEmail for normal user account that the bot will use.\n\n\nDO NOT\n input your personal login details here.\n\n\n\n\n\n\npassword\n\n\nPassword for the account mentioned above.\n\n\nAs above.\n\n\n\n\n\n\noauth\n\n\nThe OAuth URL for the bot.\n\n\nRefer to the \"Making the config\" section.\n\n\n\n\n\n\n###Database section\n\n\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nNotes\n\n\n\n\n\n\n--------\n\n\n-----------\n\n\n-----\n\n\n\n\n\n\nhost\n\n\nPoints to WildBeast's database, localhost by default.\n\n\nDon't modify unless you have a remote database set up.\n\n\n\n\n\n\nport\n\n\nSpecifies which network port the RethinkDB server is running on.\n\n\nAs above. Default is 28015.\n\n\n\n\n\n\npassword\n\n\nPassword to RethinkDB user.\n\n\nAdmin account has no password by default. Don't set a password for the admin account unless you want to have to edit this.\n\n\n\n\n\n\nuser\n\n\nRethinkDB user account to use for accessing the database.\n\n\nAdmin by default. Admin will have permission to all databases so it should stay like this.\n\n\n\n\n\n\n###Settings section\n\n\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nNotes\n\n\n\n\n\n\n--------\n\n\n-----------\n\n\n-----\n\n\n\n\n\n\nprefix\n\n\nThe command prefix the bot will use.\n\n\nCan be a special character like \n/\n etc.\n\n\n\n\n\n\nautodeletemsg\n\n\nAutomatically delete music-related messages after a while.\n\n\nThe time for this is possible to configure. Boolean.\n\n\n\n\n\n\ndeleteTimeout\n\n\nThe amount of time after which to delete the messages.\n\n\nInsert time in milliseconds, default 3000.\n\n\n\n\n\n\ndeleteTimeoutLong\n\n\nSame as above, but for messages that have a longer timeout.\n\n\nFor now only \nthis message\n uses the long timeout. In milliseconds, default 6000.\n\n\n\n\n\n\nmaxvcslots\n\n\nHow many concurrent voice connections the bot can have until it won't join more.\n\n\nDefault limit is 10, depends on the beefyness of your system.\n\n\n\n\n\n\n###Permissions section\n\n\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nNotes\n\n\n\n\n\n\n--------\n\n\n-----------\n\n\n-----\n\n\n\n\n\n\nmaster\n\n\nThe highest possible access level of 9. Full permissions.\n\n\nOnly give this to yourself and maybe others you really trust.\n\n\n\n\n\n\nlevel1, level2, level3\n\n\nSettable access levels that give users access to certain commands.\n\n\nDefault access levels can be found in \nthe command files\n.\n\n\n\n\n\n\nNotice: By default, when WildBeast joins a server it will set the owner's access level to 5. This is to give them control over normal users.\n\n\n\n\n\n\n\n\n\n\n###API keys section\n\n\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nNotes\n\n\n\n\n\n\n--------\n\n\n-----------\n\n\n-----\n\n\n\n\n\n\nimgflip\n\n\nYour \nimgflip\n login details.\n\n\nUsed in certain meme commands.\n\n\n\n\n\n\ngoogle\n\n\nFor retrieving data from YouTube.\n\n\nRefer to the \"Making the config\" section.\n\n\n\n\n\n\nmashape\n\n\nFor retrieving the Fortune Cow.\n\n\nRefer to the \"Making the config\" section.\n\n\n\n\n\n\ncse\n\n\nDeprecated and not required, don't bother with this.\n\n\nThis will be removed at some point.\n\n\n\n\n\n\ntwitchId\n\n\nFor retrieving status of whether a user on Twitch is streaming or not.\n\n\nRefer to the \"Making the config\" section.\n\n\n\n\n\n\n##Making the config\n\n\n\n\n\n\n\n\n\n\n- OAuth app\n\n\n\n\n\n\n\n\n\n\n1. We'll start off by creating an OAuth application in Discord's developer interface so that the bot can login.\n\n\n\n\n\n\n\n\n\n\n- Go to https://discordapp.com/developers/applications/me and create a new application.\n\n\n\n\n\n\n\n\n\n\n- Name it whatever you prefer and give it a fancy picture. Fill in a description if you want to, then click \"Create application\".\n\n\n\n\n\n\n\n\n\n\n- Now you'll have a more full-fledged app page. Click \"Add Bot User\" and confirm to make it a bot.\n\n\n\n\n\n\n\n\n\n\n- Here you'll get a Client ID and a token. Reveal the token (\nNot the secret\n) and replace \"Bot token\" with that in the config.\n\n\n\n\n\n\n\n\n\n\n2. If you completed the step above and want to comply with Discord rules, skip the email/password section and leave them be.\n\n\n\n\n\n\n\n\n\n\n3. Next we'll make an OAuth URL for the bot so it can be added to the server.\n\n\n\n\n\n\n\n\n\n\n- Just put this placeholder URL somewhere for now, \ndon't open it as it will not work\n.\n\n\n\n\n\n\n\n\n\n\nhttps://discordapp.com/oauth2/authorize?&client_id=CLIENTID&scope=bot&permissions=536345655\n\n\n\n\n\n\n\n\n\n\n- Go back to the app page, and copy the Client ID.\n\n\n\n\n\n\n\n\n\n\n- Replace the \nCLIENTID\n placeholder in the URL above with the ID you just copied. You can open the URL to test that you did it right.\n\n\n\n\n\n\n\n\n\n\n- If the URL works as intended, copy it and replace \"URL\" in the config with the one you copied.\n\n\n\n\n\n\n\n\n\n\n- You can also open the URL and add your bot to the server at this point, so you don't forget it. It will have the permissions it wants precalculated due to the number after the \npermissions\n property. Just select your server from the dropdown list and add it. The bot won't do anything at this stage because we're not finished yet.\n\n\n\n\n\n\n\n\n\n\n- If you can't select your server, it might be that you lack Manage Server permissions.\n\n\n\n\n\n\n\n\n\n\n- Prefix and other settings\n\n\n\n\n\n\n\n\n\n\n- Setting the command prefix isn't really \nrocket science\n. This can be any special character, for instance \n/\n, \n?\n and so forth.\n\n\n\n\n\n\n\n\n\n\n- You can also use multiple characters as a prefix, for instance \n!!\n and \n++\n.\n\n\n\n\n\n\n\n\n\n\n- Note that there is always a so-called global prefix: A mention. Saying \n@BotName\n in chat will function as a prefix as well. \nThis doesn't need to be specified in the config as it's always active.\n\n\n\n\n\n\n\n\n\n\n- The rest of the options are straight forward. \nautodeletemsg\n can be true or false, the message deletion times can be whatever you fancy in milliseconds and \nmaxvcslots\n is just a number.\n\n\n\n\n\n\n\n\n\n\n- Permissions\n\n\n\n\n\n\n\n\n\n\n- This is a section that has a very interesting gimmick to it.\n\n\n\n\n\n\n\n\n\n\n- WildBeast has a command named \nsetlevel\n which will set the level of a user. \nHowever\n, that is written into a server-specific config. Which means that if you set the level of someone to 2 in Server1, they will not be level 2 in Server2, for example.\n\n\n\n\n\n\n\n\n\n\n- The permissions fields here are so-called \nglobal permissions\n, and will apply unless a server-specific level is set.\n\n\n\n\n\n\n\n\n\n\n- Use this to add technicians and others who need permissions regardless of where the bot is.\n\n\n\n\n\n\n\n\n\n\n- You can specify users here by adding their IDs into the fields. Only the master field is mandatory.\n\n\n\n\n\n\n\n\n\n\n- You can get the ID of a user by either \"backlash mentioning\" them, which means to say typing \n\\@User\n in chat or by enabling Developer Mode (Personal Settings -> Appearance -> Enable Developer Mode) and right-clicking on someone, subsequently selecting Copy ID from the list and pasting it in between the quotes.\n\n\n\n\n\n\n\n\n\n\n- Remember to follow the example syntax in the master field when adding multiple users!\n\n\n\n\n\n\n\n\n\n\n- API keys\n\n\n\n\n\n\n\n\n\n\n- General notice: Anything within these fields is sensitive and could do much harm if revealed to the public.\n\n\n\n\n\n\n\n\n\n\n- \nTherefore it is imperative that you keep this to yourself.\n\n\n\n\n\n\n\n\n\n\n- WildBeast maintainers will \nNEVER\n ask for your login details or API keys. Only show the config to trusted WildBeast maintainers with the \nStaff\n role in WildBot's Territory.\n\n\n\n\n\n\n\n\n\n\n- imgflip\n\n\n\n\n\n\n\n\n\n\n- The procedure for getting this isn't tricky. Just go to https://imgflip.com, create an account and input your username and password into the fields.\n\n\n\n\n\n\n\n\n\n\n- Google\n\n\n\n\n\n\n\n\n\n\n- This API is used to retrieve data from YouTube, related to music playback.\n\n\n\n\n\n\n\n\n\n\n1. Go to https://console.developers.google.com and create a new project. Name it whatever you fancy. Nothing else needs to be changed unless you want to change the project ID or the app engine location.\n\n\n\n\n\n\n\n\n\n\n2. Wait a while as the project is being created.\n\n\n\n\n\n\n\n\n\n\n3. When the creation process is completed, you'll get taken to the Dashboard screen of the project. In the sidebar on the left, click \"Library\".\n\n\n\n\n\n\n\n\n\n\n4. This will take you to the API library. Select \"YouTube Data API\" as highlighted below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5. When the API page opens, click the \"Enable\" button in the top bar. Then you will get a notification saying that you need to create creditentials. That's exactly what we will do.\n\n\n\n\n\n\n\n\n\n\n6. Click the \"Go to creditentials\" button. In the next dropdowns, make them look like following.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7. Hit \"What creditentials do I need?\" and the page will generate a Google API key for you. Copy the API key and replace the \"A google key\" placeholder with that key in the config.\n\n\n\n\n\n\n\n\n\n\n- Mashape\n\n\n\n\n\n\n\n\n\n\n- This API is used with the \nfortunecow\n command.\n\n\n\n\n\n\n\n\n\n\n1. Go to \nthe Mashape site\n and login as you prefer, GitHub login is supported.\n\n\n\n\n\n\n\n\n\n\n2. Navigate to the \nMashape APIs dashboard\n and add a new application. Name it as you wish.\n\n\n\n\n\n\n\n\n\n\n3. Once the app is created, click \"Add API to your application\" and search for \nfortunecow\n.\n\n\n\n\n\n\n\n\n\n\n4. Open the fortunecow API page and in one of the dropdowns on the left, change it to the application you just created and hit \"Test Endpoint\" on any you wish to test. Only one is required.\n\n\n\n\n\n\n\n\n\n\n5. This will add the API to your application. Navigate back to the dashboard and click on the app itself. It should now have an appearance that resembles to this.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7. Hit \"Get the keys\" in the top-right corner. In the drop-down menu that is opened, select \"Production\". This will be your Mashape API key for that application. Copy that and replace the \"A mashape key\" placeholder in the config with that key.\n\n\n\n\n\n\n\n\n\n\n- CSE\n\n\n\n\n\n\n\n\n\n\n- This option isn't required anymore and can safely be left alone. If you really want to get one you can, but it won't do anything and you'll have to do that yourself.\n\n\n\n\n\n\n\n\n\n\n- Twitch\n\n\n\n\n\n\n\n\n\n\n- This API is used with the \ntwitch\n command. This will be the client ID the bot passes to Twitch when retrieving stream status.\n\n\n\n\n\n\n\n\n\n\n1. Go to the \nTwitch Connections page\n, scroll down to the bottom and click \"Register new application\".\n\n\n\n\n\n\n\n\n\n\n2. Fill in the fields. Name should be your app name, and set the Redirect URI to \nhttp://localhost\n unless you want something to function differently. Set the app type to \"Chat Bot\" as that's what you're basically doing here.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3. Click \"Register\". This will take you to the application management page. Down towards the bottom, there will be a section saying \"Client ID\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4. Copy that character sequence and replace the \"A twitch Client-ID\" placeholder in the config with that ID.\n\n\n\n\n\n\n\n\n\n\n\n\nThat's all, your config should now be ready to rock! Save it as \nconfig.json\n (\nNOT\n \nconfig.example.json\n as the bot will error if you do. TLDR: Don't hit Ctrl+S, hit Ctrl+Alt+S) and upload it to the server via FileZilla.\n\n\nRunning the bot\n\n\nCongratulations, your WildBeast instance should be ready to launch!\n\n\nTo test if you've done everything correctly, you can do a \"test run\" with the bot. This means not making it permanently available, just testing if any errors are spat out when running.\n\n\nRun the following command within the bot's folder:\n\n\nnode DougBot.js\n\n\n\n\nUpon first run, the bot will automatically create the database tables needed to run it.\n\n\nIf the bot runs without any errors, you have had success so far!\n\n\nYou can test simple functionality by running the \nping\n command (With your desired prefix) in a text channel that the bot can see. If it answers \"Pong!\", then congratulations, \nyou have successfully set up WildBeast!\n\n\nBackground running WildBeast\n\n\nWith the current system that we described above, the bot will run but doesn't keep going when you log off but shuts down. How can we combat this? The answer is: PM2!\n\n\nPM2, short of Process Manager 2, is a Node app intended to run and manage multiple apps running on one account in a Linux environment, which enables more than one process running at a time.\n\n\nOur official instance, namely WildBot uses PM2, so this resource is a good one to use!\n\n\nInstalling PM2 and starting the bot\n\n\nBefore doing this, hit Ctrl+C (Close command) to shut down WildBeast if it's still running.\n\n\nYou can install PM2 by using the following command in the server root folder:\n\n\nnpm install pm2 -g\n\n\n\n\nWhen PM2 is installed, navigate to the WildBeast install directory (\ncd Wildbeast\n if you are in the server root). Then execute the following command:\n\n\npm2 start DougBot.js\n\n\n\n\nIt should then start the process and return a small process table with DougBot.js listed. The bot should now be online in your server as well.\n\n\nYou can find out more about PM2 by typing \npm2\n into the console.\n\n\nAnd that's it! You are now ready to start using your very own WildBeast instance!\n\n\nKeep in mind, if you have further questions or need help, we're around over at our official server! Link below.\n\n\nOn the behalf of the WildBeast team, \nwe hope you enjoy your bot!",
            "title": "Linux Guide"
        },
        {
            "location": "/install_linux/#prerequisites",
            "text": "A Linux server  Type: VPS is enough to run WB, dedicated is a bit overshooting unless you have something else running there as well.  OS: Ubuntu, latest version if possible.  RAM: 512 MB upwards, if you plan on having it on just a few servers. Scale up if necessary.  Processor: Single core @ 3,30 GHz will work just fine, as above.  SSH access to the server.    Programs  SSH client, i.e.  PuTTY  for executing commands to the server  FTP program, i.e.  FileZilla  for quick editing and upload of files  A code editor, i.e.  Notepad++  or  Atom",
            "title": "Prerequisites"
        },
        {
            "location": "/install_linux/#pre-setup",
            "text": "We higly recommend that you go through a basic Linux server setup before starting this, which includes adding a new user, disabling root login (If you feel so) and adding key authentication for logins. If you have no idea what we mean by this, see the  Digital Ocean guide for initial server setup . When this is complete, you can proceed to the next step.",
            "title": "Pre-setup"
        },
        {
            "location": "/install_linux/#installation",
            "text": "General note: During installation, some administrative tasks will be executed. For these to work (Especially installations),  you need to run these commands as sudo ! They might error if you don't.\nLuckily, the process of executing as sudo isn't that complicated. Just put  sudo  ahead of every install command or other administrative equivalent.\nYou will be asked for a password when doing the command, that's all that really is added. Keep this in mind when setting up, so you don't waste our time with errors that stem from lacking permissions! \nThis does of course not apply to you who choose to not do the basic initial server setup and instead run as root.",
            "title": "Installation"
        },
        {
            "location": "/install_linux/#installing-node",
            "text": "First off, we'll install Node.JS, the library WildBeast uses. The current 6.x.x version works fine.  wget -qO- https://deb.nodesource.com/setup_6.x | sudo bash -\nsudo apt-get install -y nodejs\nsudo apt-get install -y build-essential  After that is completed, you can check your Node version by executing the following:  node --version  The output should then be this or close to that.  v5.10.1",
            "title": "Installing Node"
        },
        {
            "location": "/install_linux/#retrieving-wildbeast",
            "text": "Now we'll retrieve the WildBeast files via Git. Install it with the following command:  apt-get install git  When the install completes, clone the WildBeast Git repository.  git clone https://github.com/TheSharks/WildBeast.git  If you mess something up during the installation process, you can delete the directory with  rm -d -f -r /WildBeast  and reclone the Git repo.",
            "title": "Retrieving WildBeast"
        },
        {
            "location": "/install_linux/#installing-additional-dependencies",
            "text": "Now it's time to install the rest of the dependencies for WildBeast. Change the working directory to WildBeast with the command  cd WildBeast  before proceeding.  Next, we will install FFMPEG.  This is a crucial step if you want to use music playback, so pay attention! \nRun these commands subsequently:  sudo apt-get install ffmpeg -y  Without changing workdir, we'll now install the Node modules required for usage in WildBeast. Execute the following:  npm install  This will likely take a while as it has a lot to retrieve. If you get warns (Yellow text) you can ignore them as long as the output resembles to the following.  WildBeast@4.0.0 /home/(yourhomedir)\n+-- cleverbot-node@0.2.2\n| +-- crypto@0.0.3\n| `-- http@0.0.0\n+-- discordie@0.8.1\n(And so forth)  Note:  If you get get errors (Red text), there may be different reasons for that. You can try hotfixing with this command:  sudo add-apt-repository ppa:mc3man/trusty-media && sudo apt-get update && sudo apt-get install ffmpeg -y  After doing that, repeat the above. If you still get errors, feel free to come and ask us over at  WildBot's Territory .  Finally, we'll install youtube-dl for the bot to be able to retrieve videos from remote sources. Use this command to accomplish that.  npm install fent/node-youtube-dl -g  If you get errors or the bot fails to run later on, rebuild YTDL by executing this command.  npm rebuild youtube-dl",
            "title": "Installing additional dependencies"
        },
        {
            "location": "/install_linux/#installing-rethinkdb-and-creating-the-db",
            "text": "As of WildBeast version 4.0.0, the bot uses RethinkDB to store server-specific data. This includes server owner, customize options and a whole bunch of other things.  Important note before starting:  Do not fiddle with RethinkDB options or execute commands outside of the ones we tell you to unless you understand RethinkDB and can unbork it yourself. We will not start solving your database if you messed it up.  Run the following commands one at a time.  NOTE: The first command is  a single command . If it takes up multiple lines here in the docs, that is due to physical screen size.  Make sure to paste it in as a whole!  source /etc/lsb-release && echo \"deb http://download.rethinkdb.com/apt $DISTRIB_CODENAME main\" | sudo tee etc/apt/sources.list.d/rethinkdb.list\nwget -qO- https://download.rethinkdb.com/apt/pubkey.gpg | sudo apt-key add -\nsudo apt-get update\nsudo apt-get install rethinkdb  When RethinkDB has installed, run the following commands one at a time:  screen -S rethinkdb\nrethinkdb --bind all  If RethinkDB runs without errors, you should be good to go. When this is the case, hit Ctrl + A and then Ctrl + D to detach from the screen session.  WildBeast has a system built in to create the required databases and tables for you without extra effort. To do this, execute this:  node DougBot.js --createdatabase  After this it will tell you to restart without the parameter there. Don't do that yet, leave that to post-config.",
            "title": "Installing RethinkDB and creating the DB"
        },
        {
            "location": "/install_linux/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/install_linux/#setting-up-sftp",
            "text": "Next we'll make a config file for WildBeast. Unless you love your command line and editing stuff that way, this is the step where we'd advise you to bring out FileZilla. Using this program, you can transfer files from and to the server. This speeds up the editing process.  Start up FileZilla and open the server manager by hitting Ctrl+S. Click \"New Site\" and name it whatever you prefer. Then fill in the server's IP address. By default, SFTP (SSH File Transfer Protocol) connections go to port 22.\nIn the dropdown menu below, select SFTP.  Using normal FTP will initiate  maximum borkdrive  so don't use that. \nIn the field below, you'll be setting the login method. Depending on the level of privacy or ease you want, you can select either  Normal  or  Ask for password . Fill in your login details accordingly.  Unless you know what you are doing,  don't touch the rest of the tabs . They are fine as they are.  Your site should be something like the example below.",
            "title": "Setting up SFTP"
        },
        {
            "location": "/install_linux/#retrieving-the-example-config",
            "text": "Connect to the server in FileZilla. You should now see the so-called remote site in FileZilla. Open the WildBeast directory. In here you can find a file named  config.example.json .\nRight click that file and select \"Download\". This will download the file to your computer for editing. On the left-hand side of the screen, you can see where the file was downloaded.\nFind  config.example.json  on your PC and open it using Notepad++ or any other code editor.  Do not edit it with Windows Notepad, that will be a mess.",
            "title": "Retrieving the example config"
        },
        {
            "location": "/install_linux/#the-config-file",
            "text": "When opening the config file, you should have a file that looks like the  example config  (The CSE is deprecated and likely to be removed, but the others are still needed)  We'll now walk you through the different sections in the config and what they do.",
            "title": "The config file"
        },
        {
            "location": "/install_linux/#bot-section",
            "text": "Property  Explanation  Notes      isbot  If an OAuth bot account should be used.  Recommended to be true due to  Discord bot rules .    token  OAuth token for the bot.  Refer to the \"Making the config\" section.    email  Email for normal user account that the bot will use.  DO NOT  input your personal login details here.    password  Password for the account mentioned above.  As above.    oauth  The OAuth URL for the bot.  Refer to the \"Making the config\" section.    ###Database section      Property  Explanation  Notes    --------  -----------  -----    host  Points to WildBeast's database, localhost by default.  Don't modify unless you have a remote database set up.    port  Specifies which network port the RethinkDB server is running on.  As above. Default is 28015.    password  Password to RethinkDB user.  Admin account has no password by default. Don't set a password for the admin account unless you want to have to edit this.    user  RethinkDB user account to use for accessing the database.  Admin by default. Admin will have permission to all databases so it should stay like this.    ###Settings section      Property  Explanation  Notes    --------  -----------  -----    prefix  The command prefix the bot will use.  Can be a special character like  /  etc.    autodeletemsg  Automatically delete music-related messages after a while.  The time for this is possible to configure. Boolean.    deleteTimeout  The amount of time after which to delete the messages.  Insert time in milliseconds, default 3000.    deleteTimeoutLong  Same as above, but for messages that have a longer timeout.  For now only  this message  uses the long timeout. In milliseconds, default 6000.    maxvcslots  How many concurrent voice connections the bot can have until it won't join more.  Default limit is 10, depends on the beefyness of your system.    ###Permissions section      Property  Explanation  Notes    --------  -----------  -----    master  The highest possible access level of 9. Full permissions.  Only give this to yourself and maybe others you really trust.    level1, level2, level3  Settable access levels that give users access to certain commands.  Default access levels can be found in  the command files .    Notice: By default, when WildBeast joins a server it will set the owner's access level to 5. This is to give them control over normal users.      ###API keys section      Property  Explanation  Notes    --------  -----------  -----    imgflip  Your  imgflip  login details.  Used in certain meme commands.    google  For retrieving data from YouTube.  Refer to the \"Making the config\" section.    mashape  For retrieving the Fortune Cow.  Refer to the \"Making the config\" section.    cse  Deprecated and not required, don't bother with this.  This will be removed at some point.    twitchId  For retrieving status of whether a user on Twitch is streaming or not.  Refer to the \"Making the config\" section.    ##Making the config      - OAuth app      1. We'll start off by creating an OAuth application in Discord's developer interface so that the bot can login.      - Go to https://discordapp.com/developers/applications/me and create a new application.      - Name it whatever you prefer and give it a fancy picture. Fill in a description if you want to, then click \"Create application\".      - Now you'll have a more full-fledged app page. Click \"Add Bot User\" and confirm to make it a bot.      - Here you'll get a Client ID and a token. Reveal the token ( Not the secret ) and replace \"Bot token\" with that in the config.      2. If you completed the step above and want to comply with Discord rules, skip the email/password section and leave them be.      3. Next we'll make an OAuth URL for the bot so it can be added to the server.      - Just put this placeholder URL somewhere for now,  don't open it as it will not work .      https://discordapp.com/oauth2/authorize?&client_id=CLIENTID&scope=bot&permissions=536345655      - Go back to the app page, and copy the Client ID.      - Replace the  CLIENTID  placeholder in the URL above with the ID you just copied. You can open the URL to test that you did it right.      - If the URL works as intended, copy it and replace \"URL\" in the config with the one you copied.      - You can also open the URL and add your bot to the server at this point, so you don't forget it. It will have the permissions it wants precalculated due to the number after the  permissions  property. Just select your server from the dropdown list and add it. The bot won't do anything at this stage because we're not finished yet.      - If you can't select your server, it might be that you lack Manage Server permissions.      - Prefix and other settings      - Setting the command prefix isn't really  rocket science . This can be any special character, for instance  / ,  ?  and so forth.      - You can also use multiple characters as a prefix, for instance  !!  and  ++ .      - Note that there is always a so-called global prefix: A mention. Saying  @BotName  in chat will function as a prefix as well.  This doesn't need to be specified in the config as it's always active.      - The rest of the options are straight forward.  autodeletemsg  can be true or false, the message deletion times can be whatever you fancy in milliseconds and  maxvcslots  is just a number.      - Permissions      - This is a section that has a very interesting gimmick to it.      - WildBeast has a command named  setlevel  which will set the level of a user.  However , that is written into a server-specific config. Which means that if you set the level of someone to 2 in Server1, they will not be level 2 in Server2, for example.      - The permissions fields here are so-called  global permissions , and will apply unless a server-specific level is set.      - Use this to add technicians and others who need permissions regardless of where the bot is.      - You can specify users here by adding their IDs into the fields. Only the master field is mandatory.      - You can get the ID of a user by either \"backlash mentioning\" them, which means to say typing  \\@User  in chat or by enabling Developer Mode (Personal Settings -> Appearance -> Enable Developer Mode) and right-clicking on someone, subsequently selecting Copy ID from the list and pasting it in between the quotes.      - Remember to follow the example syntax in the master field when adding multiple users!      - API keys      - General notice: Anything within these fields is sensitive and could do much harm if revealed to the public.      -  Therefore it is imperative that you keep this to yourself.      - WildBeast maintainers will  NEVER  ask for your login details or API keys. Only show the config to trusted WildBeast maintainers with the  Staff  role in WildBot's Territory.      - imgflip      - The procedure for getting this isn't tricky. Just go to https://imgflip.com, create an account and input your username and password into the fields.      - Google      - This API is used to retrieve data from YouTube, related to music playback.      1. Go to https://console.developers.google.com and create a new project. Name it whatever you fancy. Nothing else needs to be changed unless you want to change the project ID or the app engine location.      2. Wait a while as the project is being created.      3. When the creation process is completed, you'll get taken to the Dashboard screen of the project. In the sidebar on the left, click \"Library\".      4. This will take you to the API library. Select \"YouTube Data API\" as highlighted below.           5. When the API page opens, click the \"Enable\" button in the top bar. Then you will get a notification saying that you need to create creditentials. That's exactly what we will do.      6. Click the \"Go to creditentials\" button. In the next dropdowns, make them look like following.           7. Hit \"What creditentials do I need?\" and the page will generate a Google API key for you. Copy the API key and replace the \"A google key\" placeholder with that key in the config.      - Mashape      - This API is used with the  fortunecow  command.      1. Go to  the Mashape site  and login as you prefer, GitHub login is supported.      2. Navigate to the  Mashape APIs dashboard  and add a new application. Name it as you wish.      3. Once the app is created, click \"Add API to your application\" and search for  fortunecow .      4. Open the fortunecow API page and in one of the dropdowns on the left, change it to the application you just created and hit \"Test Endpoint\" on any you wish to test. Only one is required.      5. This will add the API to your application. Navigate back to the dashboard and click on the app itself. It should now have an appearance that resembles to this.           7. Hit \"Get the keys\" in the top-right corner. In the drop-down menu that is opened, select \"Production\". This will be your Mashape API key for that application. Copy that and replace the \"A mashape key\" placeholder in the config with that key.      - CSE      - This option isn't required anymore and can safely be left alone. If you really want to get one you can, but it won't do anything and you'll have to do that yourself.      - Twitch      - This API is used with the  twitch  command. This will be the client ID the bot passes to Twitch when retrieving stream status.      1. Go to the  Twitch Connections page , scroll down to the bottom and click \"Register new application\".      2. Fill in the fields. Name should be your app name, and set the Redirect URI to  http://localhost  unless you want something to function differently. Set the app type to \"Chat Bot\" as that's what you're basically doing here.           3. Click \"Register\". This will take you to the application management page. Down towards the bottom, there will be a section saying \"Client ID\".           4. Copy that character sequence and replace the \"A twitch Client-ID\" placeholder in the config with that ID.       That's all, your config should now be ready to rock! Save it as  config.json  ( NOT   config.example.json  as the bot will error if you do. TLDR: Don't hit Ctrl+S, hit Ctrl+Alt+S) and upload it to the server via FileZilla.",
            "title": "Bot section"
        },
        {
            "location": "/install_linux/#running-the-bot",
            "text": "Congratulations, your WildBeast instance should be ready to launch!  To test if you've done everything correctly, you can do a \"test run\" with the bot. This means not making it permanently available, just testing if any errors are spat out when running.  Run the following command within the bot's folder:  node DougBot.js  Upon first run, the bot will automatically create the database tables needed to run it.  If the bot runs without any errors, you have had success so far!  You can test simple functionality by running the  ping  command (With your desired prefix) in a text channel that the bot can see. If it answers \"Pong!\", then congratulations,  you have successfully set up WildBeast!",
            "title": "Running the bot"
        },
        {
            "location": "/install_linux/#background-running-wildbeast",
            "text": "With the current system that we described above, the bot will run but doesn't keep going when you log off but shuts down. How can we combat this? The answer is: PM2!  PM2, short of Process Manager 2, is a Node app intended to run and manage multiple apps running on one account in a Linux environment, which enables more than one process running at a time.  Our official instance, namely WildBot uses PM2, so this resource is a good one to use!",
            "title": "Background running WildBeast"
        },
        {
            "location": "/install_linux/#installing-pm2-and-starting-the-bot",
            "text": "Before doing this, hit Ctrl+C (Close command) to shut down WildBeast if it's still running.  You can install PM2 by using the following command in the server root folder:  npm install pm2 -g  When PM2 is installed, navigate to the WildBeast install directory ( cd Wildbeast  if you are in the server root). Then execute the following command:  pm2 start DougBot.js  It should then start the process and return a small process table with DougBot.js listed. The bot should now be online in your server as well.  You can find out more about PM2 by typing  pm2  into the console.",
            "title": "Installing PM2 and starting the bot"
        },
        {
            "location": "/install_linux/#and-thats-it-you-are-now-ready-to-start-using-your-very-own-wildbeast-instance",
            "text": "Keep in mind, if you have further questions or need help, we're around over at our official server! Link below.  On the behalf of the WildBeast team,  we hope you enjoy your bot!",
            "title": "And that's it! You are now ready to start using your very own WildBeast instance!"
        },
        {
            "location": "/updating/",
            "text": "This is a short instruction on how to keep your WildBeast instance up to date.\n\n\nUpdating the bot\n\n\nWhen an update is made to the WildBeast source code, this becomes known as a Git \ncommit\n. Smaller hotfixes and commits happen all the time which are then compiled into larger \nreleases\n. These releases mark larger milestones within the bot's history, for instance 2.0.0 and 3.0.0 which represent major releases.\nA couple notes:\n - Commits can be made at any rate, the commit names and descriptions (At least on the ones not made by Doug) will tell whether it's worth implementing this into your instance right away.\n - Releases (AKA minor releases) represent larger patches, and it is recommended to update the bot when these releases are made.\n - Major releases are breaking changes in the code. These are really major reworks that change the way the entire bot functions. Updating at these points is near to a must.\n\n\nSo, now that we have the update structure laid out, let's get to the gist of updating WildBeast. Updating this bot is fairly simple, regardless of system being used. \nHowever, this requires you to have downloaded the bot via Git in order to work!\n\nWhen updating the bot, run the following command in CMD (Windows) or console (Linux) \nwith the working directory pointed to the WildBeast folder:\n\n\ngit pull\n\n\n\n\nThis will retrieve the latest changes directly from GitHub.\n\nNOTE:\n If you have made changes to the files, you might get an error saying that the local changes would be overwritten by the merge. In this case, you either have to manually insert changes into the code (By copying the changes from the commit, release or whatever) or discarding your local changes. If you go for the latter, you can do it with the following command:\n\n\ngit checkout -- path/to/file\n\n\n\n\nReplace the \npath/to/file\n placeholder with the file that is specified in the error.\n\n\nUpdating the dependencies\n\n\nDependencies, or deps for short, are utilities that WildBeast relies on to work. These all come in form of Node packages which are kept in one big repository over at the \nNPM website\n.\nThe retrieving and installation of these packages has been largely automated due to the existence of \npackage.json\n. This file specifies what to retrieve and update when the need arises. You can update the bot's dependencies at will, but doing so at regular intervals is recommended.\nThe regular thing for using administrative commands applies here as well: Sudo is recommended for updating these modules, for good measure.\nTo update the dependencies, execute the following command \nwith the working directory pointed to the WildBeast folder:\n\n\nnpm install\n\n\n\n\nThis will install any updates to the NPM packages the bot uses.\n\n\nFinal note\n\n\nIf the bot breaks and won't function as it should, \ntry updating the bot and the dependencies before coming to our Discord server with questions on fixing it.\n If it stays borked after this, feel free to come and ask questions then.\n\n\nWith these resources, your bot should be all fine as long as they are up to date!",
            "title": "Updating"
        },
        {
            "location": "/updating/#updating-the-bot",
            "text": "When an update is made to the WildBeast source code, this becomes known as a Git  commit . Smaller hotfixes and commits happen all the time which are then compiled into larger  releases . These releases mark larger milestones within the bot's history, for instance 2.0.0 and 3.0.0 which represent major releases.\nA couple notes:\n - Commits can be made at any rate, the commit names and descriptions (At least on the ones not made by Doug) will tell whether it's worth implementing this into your instance right away.\n - Releases (AKA minor releases) represent larger patches, and it is recommended to update the bot when these releases are made.\n - Major releases are breaking changes in the code. These are really major reworks that change the way the entire bot functions. Updating at these points is near to a must.  So, now that we have the update structure laid out, let's get to the gist of updating WildBeast. Updating this bot is fairly simple, regardless of system being used.  However, this requires you to have downloaded the bot via Git in order to work! \nWhen updating the bot, run the following command in CMD (Windows) or console (Linux)  with the working directory pointed to the WildBeast folder:  git pull  This will retrieve the latest changes directly from GitHub. NOTE:  If you have made changes to the files, you might get an error saying that the local changes would be overwritten by the merge. In this case, you either have to manually insert changes into the code (By copying the changes from the commit, release or whatever) or discarding your local changes. If you go for the latter, you can do it with the following command:  git checkout -- path/to/file  Replace the  path/to/file  placeholder with the file that is specified in the error.",
            "title": "Updating the bot"
        },
        {
            "location": "/updating/#updating-the-dependencies",
            "text": "Dependencies, or deps for short, are utilities that WildBeast relies on to work. These all come in form of Node packages which are kept in one big repository over at the  NPM website .\nThe retrieving and installation of these packages has been largely automated due to the existence of  package.json . This file specifies what to retrieve and update when the need arises. You can update the bot's dependencies at will, but doing so at regular intervals is recommended.\nThe regular thing for using administrative commands applies here as well: Sudo is recommended for updating these modules, for good measure.\nTo update the dependencies, execute the following command  with the working directory pointed to the WildBeast folder:  npm install  This will install any updates to the NPM packages the bot uses.",
            "title": "Updating the dependencies"
        },
        {
            "location": "/updating/#final-note",
            "text": "If the bot breaks and won't function as it should,  try updating the bot and the dependencies before coming to our Discord server with questions on fixing it.  If it stays borked after this, feel free to come and ask questions then.",
            "title": "Final note"
        },
        {
            "location": "/updating/#with-these-resources-your-bot-should-be-all-fine-as-long-as-they-are-up-to-date",
            "text": "",
            "title": "With these resources, your bot should be all fine as long as they are up to date!"
        },
        {
            "location": "/faq/",
            "text": "This page will provide solutions for most common installation issues for WildBeast. \nPlease read this before asking questions in our Discord server!\n\n\nGit issues\n\n\nQ. \nfatal: could not create work tree dir 'WildBeast': Permission denied\n  \n\n\nA. You're trying to install WildBeast in a location that requires administrative permissions on Windows. This can be circumvented by running Git Bash as admin or switching install directory.\n\n\nQ. Git complains about that local changes would be overwritten by a merge and will not pull the repository.  \n\n\nA. You have most likely made changes to files that the merge would overwrite and therefore it will not do it as it protects your work from being destroyed. Do \ngit reset --hard\n in the bot's folder and try again. \nNote:\n This will discard your local changes!\n\n\nWildBeast issues\n\n\nQ. I get an error saying \"No config file found, make one using the example and restart WildBeast\", what should I do?\n\n\nA. You've likely misconfigured something. Verify that you've followed the syntax and filled it in properly.",
            "title": "FAQ"
        },
        {
            "location": "/faq/#git-issues",
            "text": "Q.  fatal: could not create work tree dir 'WildBeast': Permission denied     A. You're trying to install WildBeast in a location that requires administrative permissions on Windows. This can be circumvented by running Git Bash as admin or switching install directory.  Q. Git complains about that local changes would be overwritten by a merge and will not pull the repository.    A. You have most likely made changes to files that the merge would overwrite and therefore it will not do it as it protects your work from being destroyed. Do  git reset --hard  in the bot's folder and try again.  Note:  This will discard your local changes!",
            "title": "Git issues"
        },
        {
            "location": "/faq/#wildbeast-issues",
            "text": "Q. I get an error saying \"No config file found, make one using the example and restart WildBeast\", what should I do?  A. You've likely misconfigured something. Verify that you've followed the syntax and filled it in properly.",
            "title": "WildBeast issues"
        },
        {
            "location": "/custom_commands/",
            "text": "This is the cheat sheet for the WildBeast command framework. Using these elements, you can build the command you really want to get into your own instance.\n\n\nNOTE:\n Do not come to us with questions on how to write custom commands, some basic JavaScript and programming knowledge is required. We won't give you assistance in writing your commands beyond what is listed on this page!\n\n\nCustom Commands\n\n\nStarting at version 3.0.0, WildBeast allows for the addition of user created .js files with commands, given that they are written in the \nexact\n same format as default files. This page provides you with the tools you need to create your own commands.\n\n\nImportant notes\n\n\n\n\nFiles need to declare commands to an array, and the array \nneeds\n to be exported as \nCommands\n. \n\n\nYour command files must be in the \ncustom\n folder within the \ncommands\n folder. The path would therefore be \nWildBeast/runtime/commands/custom\n.\n\n\nCommands are \nobjects\n added to an \narray\n, not the other way around!\n\n\n\n\nProperty declaration\n\n\nCommand objects consist of different \nproperties\n which define how the command runs.\nSome properties are mandatory, some aren't. Properties marked with \n[M]\n are mandatory.\n\n\nProperty list:\n\n\n\n\nname\n: Command name. This is tied the name of the command's help module and \nnot\n its callback name. [M]\n\n\nhelp\n: Defines the message displayed when \nhelp <command>\n is ran. [M]\n\n\nlevel\n: Defines minimum access level a user needs to execute this command, set to \nmaster\n to restrict usage to masters only. [M]\n\n\nfn\n: Defines the Discordie function to execute. [M]\n\n\nnoDM\n: If set to true, disallows usage in direct messages.\n\n\ntimeout\n: Defines how many seconds the command will be on timeout for. These are server specific.\n\n\nusage\n: Defines what will displayed as the example of its usage in the help command.\n\n\noverwrite\n: If true, overwrite existing default commands with code of the custom one. If you forget to set this to true, the bot will abort the execution process!\n\n\naliases\n: Array of hard coded aliases for this command. This means to tsay that the command will trigger from multiple names. For instance, \nping\n can have an alias named \npingbot\n and the bot will respond the same to both.\n\n\nhidden\n: If set to true, will hide the command from the help list. Useful for some soopah seekret commands.\n\n\n\n\nCommand\n\n\n// New file is created\nvar Commands = [] // Declaration of the command array\n\nCommands.ping = {\n  name: 'ping',\n  help: 'Check if I still live.'\n  timeout: 10,\n  usage: '<pong>',\n  overwrite: true, // WildBeast already has a command called ping, will overwrite with this\n  aliases: ['pong'],\n  level: 0,\n  fn: function(msg, suffix, bot) {\n    msg.channel.sendMessage('I LIVE')\n  }\n}\n\nexports.Commands = Commands // Expose the commands to the commandcontrol module\n\n\n\n\nAnd that's how easy it is to create your own commands for WildBeast. Good luck in making your commands, and tinker to your heart's desire!",
            "title": "Custom Command Framework"
        },
        {
            "location": "/custom_commands/#custom-commands",
            "text": "Starting at version 3.0.0, WildBeast allows for the addition of user created .js files with commands, given that they are written in the  exact  same format as default files. This page provides you with the tools you need to create your own commands.",
            "title": "Custom Commands"
        },
        {
            "location": "/custom_commands/#important-notes",
            "text": "Files need to declare commands to an array, and the array  needs  to be exported as  Commands .   Your command files must be in the  custom  folder within the  commands  folder. The path would therefore be  WildBeast/runtime/commands/custom .  Commands are  objects  added to an  array , not the other way around!",
            "title": "Important notes"
        },
        {
            "location": "/custom_commands/#property-declaration",
            "text": "Command objects consist of different  properties  which define how the command runs.\nSome properties are mandatory, some aren't. Properties marked with  [M]  are mandatory.  Property list:   name : Command name. This is tied the name of the command's help module and  not  its callback name. [M]  help : Defines the message displayed when  help <command>  is ran. [M]  level : Defines minimum access level a user needs to execute this command, set to  master  to restrict usage to masters only. [M]  fn : Defines the Discordie function to execute. [M]  noDM : If set to true, disallows usage in direct messages.  timeout : Defines how many seconds the command will be on timeout for. These are server specific.  usage : Defines what will displayed as the example of its usage in the help command.  overwrite : If true, overwrite existing default commands with code of the custom one. If you forget to set this to true, the bot will abort the execution process!  aliases : Array of hard coded aliases for this command. This means to tsay that the command will trigger from multiple names. For instance,  ping  can have an alias named  pingbot  and the bot will respond the same to both.  hidden : If set to true, will hide the command from the help list. Useful for some soopah seekret commands.",
            "title": "Property declaration"
        },
        {
            "location": "/custom_commands/#command",
            "text": "// New file is created\nvar Commands = [] // Declaration of the command array\n\nCommands.ping = {\n  name: 'ping',\n  help: 'Check if I still live.'\n  timeout: 10,\n  usage: '<pong>',\n  overwrite: true, // WildBeast already has a command called ping, will overwrite with this\n  aliases: ['pong'],\n  level: 0,\n  fn: function(msg, suffix, bot) {\n    msg.channel.sendMessage('I LIVE')\n  }\n}\n\nexports.Commands = Commands // Expose the commands to the commandcontrol module  And that's how easy it is to create your own commands for WildBeast. Good luck in making your commands, and tinker to your heart's desire!",
            "title": "Command"
        }
    ]
}